import { Composer, InlineKeyboard } from "grammy";
import { stickers } from "../sticker.ts";
import { log } from "../logs.ts";
import {
  clearTmp,
  deleteRegister,
  getProfile,
  getRegister,
  getTmpFirstName,
  getTmpIsFree,
  getTmpLastName,
  setProfile,
  setRegister,
  setTmpFirstName,
  setTmpIsFree,
  setTmpLastName,
} from "../db/profile.ts";
import { clearStatus, setStatus } from "../status.ts";
import { getStatus } from "../status.ts";
import { logsId } from "../config.ts";

export const registerComposer = new Composer();

// Step 1
registerComposer.chatType("private").command("start", async (c) => {
  if (c.msg.text.split(" ")[1] != "register") return;

  if (await getRegister(c.from.id)) {
    await c.reply("–¢—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É!");
  } else {
    if (await getProfile(c.from.id)) {
      await c.reply("–¢—ã —É–∂–µ –ø—Ä–æ—à—ë–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!");
    } else {
      await setStatus(c.from.id, "waitFirstName");

      await c.replyWithSticker(stickers.hello);
      await c.reply("–ü—Ä–∏–≤–µ—Ç!\n–ù–∞–ø–∏—à–∏, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç (—Ç–æ–ª—å–∫–æ –∏–º—è).");

      await log(
        `${
          c.from.first_name + (c.from.last_name ? " " + c.from.last_name : "")
        } ${c.from.is_premium ? "‚≠ê" : ""}\nstart register`,
        c,
      );
    }
  }
});

// Step 2
registerComposer.chatType("private").on("msg:text", async (c) => {
  const status = await getStatus(c.from.id);

  switch (status) {
    case "waitFirstName": {
      const formatted = c.msg.text.charAt(0).toUpperCase() +
        c.msg.text.slice(1);
      await setTmpFirstName(c.from.id, formatted);

      await setStatus(c.from.id, "waitLastName");
      await c.reply("–•–æ—Ä–æ—à–æ, –∞ –∫–∞–∫ —Ç–≤–æ—è —Ñ–∞–º–∏–ª–∏—è?");

      break;
    }
    case "waitLastName": {
      const formatted = c.msg.text.charAt(0).toUpperCase() +
        c.msg.text.slice(1);
      await setTmpLastName(c.from.id, formatted);
      await clearStatus(c.from.id);

      const reply_markup = new InlineKeyboard();
      reply_markup.text("–ü–ª–∞—Ç–Ω–æ üí∞", "paid");
      reply_markup.text("–ü–æ –ª—å–≥–æ—Ç–µ üÜì", "free");
      await c.reply("–¢—ã –ø–∏—Ç–∞–µ—à—å—Å—è –ø–ª–∞—Ç–Ω–æ –∏–ª–∏ –ø–æ –ª—å–≥–æ—Ç–µ?", { reply_markup });

      break;
    }
  }
});

// Step 3
registerComposer.chatType("private").callbackQuery("paid", async (c) => {
  await setTmpIsFree(c.from.id, false);
  await c.editMessageText(c.msg!.text + "\n\n–ü–ª–∞—Ç–Ω–æ üí∞");

  const reply_markup = new InlineKeyboard();
  reply_markup.text("–î–∞ ‚úÖ", "save");
  reply_markup.text("–ù–µ—Ç ‚ùå", "retry");

  const firstName = await getTmpFirstName(c.from.id);
  const lastName = await getTmpLastName(c.from.id);

  await c.reply(
    `–¢–µ–±—è –∑–æ–≤—É—Ç ${lastName} ${firstName}, —Ç—ã –ø–∏—Ç–∞–µ—à—å—Å—è –ø–ª–∞—Ç–Ω–æ, –≤—Å—ë –≤–µ—Ä–Ω–æ?`,
    { reply_markup },
  );
});

registerComposer.chatType("private").callbackQuery("free", async (c) => {
  await setTmpIsFree(c.from.id, true);
  await c.editMessageText(c.msg!.text + "\n\n–ü–æ –ª—å–≥–æ—Ç–µ üÜì");

  const reply_markup = new InlineKeyboard();
  reply_markup.text("–î–∞ ‚úÖ", "save");
  reply_markup.text("–ù–µ—Ç ‚ùå", "retry");

  const firstName = await getTmpFirstName(c.from.id);
  const lastName = await getTmpLastName(c.from.id);

  await c.reply(
    `–¢–µ–±—è –∑–æ–≤—É—Ç ${lastName} ${firstName}, —Ç—ã –ø–∏—Ç–∞–µ—à—å—Å—è –ø–æ –ª—å–≥–æ—Ç–µ, –≤—Å—ë –≤–µ—Ä–Ω–æ?`,
    { reply_markup },
  );
});

// Step 4
registerComposer.chatType("private").callbackQuery("save", async (c) => {
  await c.editMessageText(c.msg!.text + "\n\n–î–∞ ‚úÖ");

  const firstName = await getTmpFirstName(c.from.id) || "";
  const lastName = await getTmpLastName(c.from.id) || "";
  const isFree = await getTmpIsFree(c.from.id) || false;

  await setRegister(c.from.id, {
    firstName,
    lastName,
    isFree,
  });

  const reply_markup = new InlineKeyboard();
  reply_markup.text("–î–æ–±–∞–≤–∏—Ç—å ‚úÖ", `add-${c.from.id}`);
  reply_markup.text("–û—Ç–∫–ª–æ–Ω–∏—Ç—å ‚ùå", `remove-${c.from.id}`);

  await c.api.sendMessage(
    logsId,
    c.from.first_name + (c.from.last_name ? " " + c.from.last_name : "") +
      (c.from.is_premium ? " ‚≠ê" : "") + "\n" +
      `${lastName} ${firstName}, ${isFree ? "–ª—å–≥–æ—Ç–Ω–∏–∫" : "–ø–ª–∞—Ç–Ω–∏–∫"}` + "\n" +
      (c.from.username ? "@" + c.from.username : "—Å—Å—ã–ª–∫–∏ –Ω–µ—Ç :("),
    { reply_markup },
  );

  await clearTmp(c.from.id);

  await c.reply(
    "–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ!\n–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 15-20 –º–∏–Ω—É—Ç.",
  );
});

registerComposer.chatType("private").callbackQuery("retry", async (c) => {
  await c.editMessageText(c.msg!.text + "\n\n–ù–µ—Ç ‚ùå");

  await clearTmp(c.from.id);

  await setStatus(c.from.id, "waitFirstName");
  await c.reply("–î–∞–≤–∞–π –∑–∞–Ω–æ–≤–æ. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (—Ç–æ–ª—å–∫–æ –∏–º—è)");
});

// Step 5 (in logs)
registerComposer.callbackQuery(
  /^add-[0-9]+$/i,
  async (c) => {
    const uid = +c.callbackQuery.data.split("-")[1];
    if (!uid) return;

    const register = await getRegister(uid);
    if (!register) return;

    await setProfile(uid, register);

    await deleteRegister(uid);

    await c.editMessageText(
      c.callbackQuery.message!.text + "\n–î–æ–±–∞–≤–ª–µ–Ω ‚úÖ",
    );

    await c.api.sendMessage(
      uid,
      "–¢–≤–æ—è –∑–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞! –°–∫–æ—Ä–æ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!",
    );

    await c.answerCallbackQuery();
  },
);

registerComposer.callbackQuery(
  /^remove-[0-9]+$/i,
  async (c) => {
    const uid = +c.callbackQuery.data.split("-")[1];
    if (!uid) return;

    await deleteRegister(uid);

    await c.editMessageText(c.callbackQuery.message!.text + "\n–û—Ç–∫–ª–æ–Ω—ë–Ω ‚ùå");

    await c.answerCallbackQuery();
  },
);
